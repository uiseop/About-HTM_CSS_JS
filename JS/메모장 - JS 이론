JS는 인터프리팅 언어이고 번거로운 부대 작업이 필요없다는 장점이있다.
(노드같은 자바스크립트 엔진은 분명 JS이긴 하지만, 프로그래머가 개입할 필요 없이 자동으로 이뤄짐)
JS의 장점은 어디서든 쓰인다는것. 거의 항상 브라우저 스크립트 언어의 표준이였고,
노드의 등장으로 이제 브라우저 바깥으로(Back-end)영역을 확장
자바스크립트의 버전 ES5->ES6로 점점 발전할 수 있는 이유 : JS의 동적 성격때문, 최근 브라우저 업데이트 방식 때문이기도 함

원시타입  -> 실제 객체에 값이 저장되지 않음 : 대응하는 원시값에 기능을 제공하는 역할 , 임시로 만들어져서 객체랑 다르게 프로퍼티를 할당해도 undefind로 파괴됨
- 숫자 Number -> 숫자형 데이터를 하나만 갖기로 한 단순한 자바스크립트의 특성 : 고성능 정수 연산이나 정밀한 소수점 연산이 필요한 어플리케이션에선 쓸 수 없음
10진수, 2진수, 8진수, 16진수 네 가지 숫자형 리터럴을 인식 Number.EPSILON, MAX_SAFE_INTEGER, MAX_VALUE, NaN, POSITIVE_INFINITY 등 표현 가능 
- 문자열 String -> \역슬레시를 쓰면 특수문자 사용 가능 가령 \" 같은, s.toUpperCase(); : 대문자로 변형
- 불리언
- null
- undefined
- Symbol -> 유일한 토큰을 나타내기 위해 ES6에서 도입한 새 데이터 타입. 심볼은 항상 유일 PK임 : 이런 면에서 객체와 유사
Symbol() 생성자로 만듦 (new 키워드로 시작하지 않아, 대문자로 시작하는 식별자는 new와 함께쓰는게 불문율임)

객체타입 : 유일함, 다른 어떤것과도 일치하지 않음, 여러 가지 값이나 복잡한 값을 나타낼 수 있으며 변할 수 있음(본질은 컨테이너. 컨테이너의 내용물은 변할 수 있는데 컨테이너는 강철-안변함)
객체의 콘텐츠는 프로퍼티(Property) 혹은 멤버(Member)라고 부름 -> Key 문자열, 심볼이 올 수 있음
객체타입의 참조의 경우 원본이 바뀌면 및에 참조하는 값도 바뀜 -> shallowCopy라고 할 수 있음
delete sam3.speak 처럼 delete를 통해 객체의 멤버를 삭제 가능함 OOP개념 9장에 계속
- Array : 파이썬의 list와 같음. 동적으로 할당 가능, 요소 데이터타입을 가리지않음.
- Date : new Date()로 생성 가능 퀴찮아! 구글링 해! d.valueOf()사용하면 1970년1월1일부터 얼마나 지났는지 출력
- RegExp : 정규표현식이래 17장에서 설명 가령 이메일 정규표현식같은 /.../안에 표현 ex)/\b[a-z0-9._-]+@[a-z_-]+\b/;
- Map과 WeakMap
- Set과 WeakSet

데이터 타입 변환
#숫자로 변환
Number("33.3") --> 33.3
parseInt("16 volts", 10) --> 16 : 뒤에는 기수(몇진수인지 표현)
parseFloat("15.5 kph") --> 15.5 : 뒤에 기수는 default:10

#문자열로 변환
배열경우 const arr = [1,true,"hello"] --> arr.toString() --> "1,true,hello"로 변환 문자열을 쉼표로 연결한 문자열로 변환해줘서 쓸만해


#for..of
일반적인 파이썬의 for i in lst와 같음 : idx를 말고 idx번째 요소를 알고싶을때
#for..in
얘는 그냥 length를 받아오지 않고 키값을 통해 끝까지 탐색한다는 점에서 쓸모가 없어보임
