JS는 인터프리팅 언어이고 번거로운 부대 작업이 필요없다는 장점이있다.
(노드같은 자바스크립트 엔진은 분명 JS이긴 하지만, 프로그래머가 개입할 필요 없이 자동으로 이뤄짐)
JS의 장점은 어디서든 쓰인다는것. 거의 항상 브라우저 스크립트 언어의 표준이였고,
노드의 등장으로 이제 브라우저 바깥으로(Back-end)영역을 확장
자바스크립트의 버전 ES5->ES6로 점점 발전할 수 있는 이유 : JS의 동적 성격때문, 최근 브라우저 업데이트 방식 때문이기도 함

터미널에서 홈 디렉터리를 ~로 표현
ex) cd ~

사용자의 입력은 항상 비동기적이라는 사실
비동기적이란? 간단하게 어떤 작업을 수행하기위해 작업이 들어오기까지 무한정 기다리지않고 다른 작업을 진행하는
즉, 이벤트가 언제 일어날지 프로그래머가 전혀 알 수  없는 이벤트들
ex) 마우스클릭같은

Paper.js는 툴tool 객체를 통해 사용자의 입력을 처리
객체는 이벤트 핸들러를 연결 가능 onMouseDown 이벤트핸들러를 연결
tool.onMouseDown = function(event){
        // var c = Shape.Circle(event.point.x, event.point.y,20)
        x와 y 좌표를 각각 지정하지 않고 클릭한 위치를 바로 넘겨줌
        var c = Shape.Circle(event.point, 20)
        c.fillColor = 'red'
    }

Git : 프로젝트가 커져도 쉽게 관리할 수 있고 다른 개발자와 협력할 수 있게 돕는 버전 컨트롤 도구
Node : 브라우저 밖에서 자바스크립트를 실행할 수 있게 하는 도구.
Gulp : 반복적인 개발 작업을 자동화하는 빌드 도구. Grunt도 널리 쓰임. 이 책에선 걸프 사용
Babel : ES6코드를 ES5코드로 변환하는 트랜스컴파일러
ES린트: 자주 하는 실수를 피하고 더 나은 프로그래머가 되도록 돕는 린트 프로그램

npm install 로컬 패키지를 설치할 때 --save 혹은 --save-dev플래그를 사용
왜 why?? package.json에 설치한 패키지가 자동으로 등록됨

나중에 npm install을 하면 package.json을 통해 dJango의 requirements.txt처럼 필요 라이브러리들이 다운받아짐

